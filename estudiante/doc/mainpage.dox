/*! \mainpage Título de la página principal

@image html doxyque.png "Pie de foto"

# Información sobre Doxygen
Doxygen admite el uso de la [sintaxis de Markdown (Consulta aquí los comandos básicos)](https://www.markdownguide.org/basic-syntax).

Así como el uso de  <a href="https://htmlcheatsheet.com/">sintaxis <strong>HTML</strong></a>. Esto es especialmente útil
para aquellos aspectos que Markdown no permite modificar, como el <span  style="color:red">color</span>. Aunque es buena idea evitarlo en la medida de lo posible, por dos
motivos:

1. <span style="font-size:1.1em">Hace el código <strong>poco</strong> <span style="  background-image: linear-gradient(to left, #4285f4, #34a853, #fbbc05, #ea4335); -webkit-background-clip: text; color: transparent;"> <strong> LEGIBLE </strong> </span></span>
2. La idea detrás de Markdown es separar _aspecto_ y _contenido_. Y es una __gran idea__.

La forma más correcta de modificar el aspecto debería ser mediante un documento ``.css`` configurado en el archivo ``Doxyfile.in``.
Si te interesa, puedes echarle un vistazo a la [documentación](https://www.doxygen.nl/manual/customize.html) o a
temas customizados como [este](https://jothepro.github.io/doxygen-awesome-css/). Aunque el tema por defecto nos parece
perfecto, _CLÁSICO_. Así puedes centrarte en el contenido.

Por último, lo hemos visto en clase y hay suficientes ejemplos en el código fuente proporcionado, pero puedes consultar la
mayor parte de la sintaxis de Doxygen para comentar código en su
[documentación](https://www.doxygen.nl/manual/docblocks.html).

# Introducción

A RELLENAR POR EL ESTUDIANTE

# Ejecutables

@image html invert.png
## Negativo:

Calcula el negativo de una imagen

> __negativo__ \<FichImagenOriginal\> \<FichImagenDestino\>
@param "<FichImagenOriginal>" Imagen PGM a la que se va a calcular
@param <FichImagenDestino> Imagen PGM resultado de calcular el negativo

@image html Crop.png
## Subimagen

Genera una imagen a partir de otra, la imagen generada será más pequeña que la original o del mismo tamaño

> __subimagen__ \<FichImagenOriginal\> \<FichImagenDestino\> \<fila\> \<col\> \<filas_sub\>  \<cols_sub\>
@param "<FichImagenOriginal>" Imagen PGM a la que se va a calcular
@param <FichImagenDestino> Imagen PGM resultado de calcular la subimagen
@param "<fila>" Fila desde la que se recorta la imagen, esquina superior izquierda de la imagen que se extrae
@param "<cols>" Columna desde la que se recorta la imagen, esquina superior izquierda de la imagen que se extrae
@param "<filas_sub>" Número de fila de la subimagen que se extrae.
@param "<cols_sub>" Número de columnas dela subimagen que se extrae.

@image html Zoom.png
## Zoom

Realizar zoom sobre la parte de una imagen

> __zoom__ \<FichImagenOriginal\> \<FichImagenDestino\> \<fila\> \<col\> \<lado\>
@param "<FichImagenOriginal" Nombre del fichero que contiene la imagen original
@param "<FichImagenDestino" Nombre del fichero que contiene el resultado del zoom
@param "<Fila>" Fila desde la que se hace zoom la imagen, esquina superior izquierda de la imagen que se extrae
@param "<col>" Columna desde la que se hace zoom la iamgen, esquina superior izquierda de la imagen que se extrae
@param "<lado>" Tamaño del lado del cuadrado, este deberá estar incluido en la imagen

@image html Icon.png
## Icono

Crear una imagen de un tamaño muy reducido a partir de otra original

> __icono__ \<FichImagenOriginal\> \<FichImagenDestino\> \<factor\>
@param "<FichImagenOriginal" Nombre del fichero que contiene la imagen original
@param "<FichImagenDestino" Nombre del fichero que contiene el resultado del icono
@param "<factor>" Factor de reducción.

@image html Adjust.png
## Contraste

Modifca el contraste de una imagen

> __contraste__ \<FichImagenOriginal\> \<FichImagenDestino\> \<e1\> \<e2\> \<s1\> \<s2\>
@param "<FichImagenOriginal" Nombre del fichero que contiene la imagen original
@param "<FichImagenDestino" Nombre del fichero que contiene el resultado
@param "<e1>" Valor usado para el umbral mínimo de entrada
@param "<e2>" Valor usado para el umbral máximo de entrada
@param "<s1>" Valor usado para el umbral mínimo de salida
@param "<s2>" Valor usado para el umbral máximo de salida


@image html Shuffle.png
## Barajar:

Baraja pseudoaleatoriamente las filas de la imagen.

> __barajar__\<FichImagenOriginal\> \<FichImagenDestino\>
@param "<FichImagenOriginal" Nombre del fichero que contiene la imagen original
@param "<FichImagenDestino" Nombre del fichero que contiene el resultado

Para este ejercicio ademas de implementar y documentar la funcion `ShuffleRows`, debiamos de comentar las diferencias entre
la implementacion propuesta en el guion de practicas con una implementacion nueva que debiamos de implementar, haciendo uso
de unos tests que nos piden implementar para estudiar el comportamiento de la funcion con distinto numero de filas y columnas.

### Primera implementacion
La primera implementacion del metodo esta implementada en el guion de practicas y servia como un acercamiento "boraz" a la
definicion del metodo.

```
const int p =  9973  ;
Image temp(rows,cols);
int newr;
for (int r=0; r<rows; r++){
newr = (r*p) % rows;
for (int c=0; c<cols;c++)
    temp.set_pixel(r,c,get_pixel(newr,c));
}
Copy(temp);
```

Como vemos, el codigo consta de dos bucles anidados, uno itera sobre rows donde calcula el nuevo valor de fila
y el otro sobre cols que copia el contenido de la nueva fila en la nueva imagen. Y al final copia el contenido de la imagen
temporal en la imagen original, pues esta funcion no pretende generar una nueva imagen. Por lo tanto podemos decir que
el orden de eficiencia de esta primera aproximacion es de __O(rows * cols)__, si tenemos en cuenta el hecho de que se esta volviendo
a iterar sobre la imagen temporal para copiar la nueva imagen que es de orden __O(rows * cols)__, entonces el orden de eficiencia
seria de __O((rows*cols) ^ 2)__; en el caso de la imagen usada para probar el codigo seria __O(n^2)__, siendo n = rows = cols.

Su estudiando su eficiencia experimental para distintos valores de n crecientes, concluimos que efectivamente su comportamiento es cuadratico.

@image html exper3.png

A continuacion vamos a ver los resultados de los tests con esta implementacion con el objetivo de observar el comportamiento
de esta:

#### Test 1. Distinto numero de filas
```
void test_rows() {
    /*
     * Test diferentes filas
     * Para cada nuevo numero de filas creamos una nueva imagen con dicho numero de filas
     * y un numero de columnas constante.
     * Se medira e informara del tiempo empleado en barajar las filas de la imagen.
     */
    const int ncols = 500;
    clock_t tini;
    clock_t tfin;

    int nrows;
    for (nrows = 1; nrows < 500; ++nrows) {
        Image img(nrows, ncols);

        tini = clock();
        img.ShuffleRows();
        tfin = clock();

        cout << "N filas: " << nrows << "\t" << (double)(tfin - tini) << " ms" << "\n";
    }
}
```

@image html exper1.png

Como se puede observar, el comportamiento de esta grafica parece ser lineal. Esto se debe a que estamos dejando el numero de
columnas fijo mientras que el numero de filas crece, por lo tanto el orden de complejidad seria: __O(nrows * ncols)__
el numero de columnas al ser fijo su orden de eficiencia es constante, entonces __O(nrows * ncols) = O(nrows)__.

#### Test 2. Distinto numero de columnas
```
void test_cols() {
    /*
     * Test diferentes cols
     * Para cada nuevo numero de columnas creamos una nueva imagen con dicho numero de columnas
     * y un numero de filas constante.
     * Se medira e informara del tiempo empleado en barajar las filas de la imagen.
     */
    const int nfilas = 500;
    clock_t tini;
    clock_t tfin;

    int ncols;
    for (ncols = 0; ncols < 500; ++ncols) {
        Image img(nfilas, ncols);

        tini = clock();
        img.ShuffleRows();
        tfin = clock();

        cout << "N cols: " << ncols << "\t" << (double)(tfin - tini) << " ms" << "\n";
    }
}
```

@image html exper2.png

Este test tiene bastante similitud con el anterior, pues tiene la misma metodologia: el numero de filas se que da fijo y el
de columnas es el que va cambiando con cada iteracion. Por tanto, el orden de eficiencia de este codigo es
__O(ncols * nrows) = O(ncols)__.

#### Test 3. Distinto numero de llamadas a ShuffleRows
```
void test_calls(Image image) {
    /*
     * Test diferente numero de llamadas
     */
    int i = 0;
    clock_t tini;
    clock_t tfin;

    for (int n = 0; n < 1000; n+=100){
        tini = clock();
        while (i < n) {
            image.ShuffleRows();
            i++;
        }
        tfin = clock();
        cout << "N llamadas: " << n << " \t" << (double) (tfin - tini) << " ms" << "\n";
    }
}
```


| __Numero de llamadas__ | __Tiempo de ejecucion (ms)__ |
| ---------------------- | ------------------------ |
| 0                      | 0                        |
| 100                    | 147856               |
| 200                    | 113676                |
| 300                    | 132002                |
| 400                    | 119010                |
| 500                    | 113557                |
| 600                    | 115162                |
| 700                    | 120546                |
| 800                    | 116977                |
| 900                    | 121617                |


Este test trata de estudiar el tiempo que tarda nuestro programa en ejecutarse bajo "estres" con muchas llamadas al metodo,
en la tabla podemos observar el tiempo que tarda para distintos numeros de llamadas.

### Segunda implementacion
Esta implementacion trata de mejorar en eficiencia la anterior. Para esto debiamos de recordar que el TDA imagen esta representado
por un puntero a punteros, y teniamos que aprovechar esta representacion para poder hacer del metodo uno mas eficiente. En
efecto, al solo querer barajar las filas, no tenemos porque copiar el contenido de una fila a otra, simplemente tenemos que
__cambiar las referencias a columna que apuntan los punteros fila__. Por tanto, el codigo queda de esta manera:

```
    const int p = 9973;
    int newr;

    // Creamos un nuevo puntero a punteros
    byte ** n_img = new byte * [rows];

    // Asignamos las filas barajadas de img a n_img
    for (int r = 0; r < this->rows; ++r) {
        newr = (r*p) % this->rows;
        n_img[r] = this->img[newr];
    }

    // Le asignamos a img la nueva imagen con filas barajadas
    this->img = n_img;
    n_img = nullptr;

```

Ahora el orden de eficiencia no depende del numero de columnas, solo de las filas, consiguiendo asi un orden de eficiencia
__O(nrows)__.

Su estudio experimental nos permite ver que efectivamente su comportamiento es lineal.

@image html exper3.2.png

Sin embargo, esto tiene un problema, la manera en la que el programa escribe en disco, es de forma consecutiva en memoria,
y al solo cambiar la direccion a lo que apuntan los punteros fila, no estamos cambiando en nada su representacion interna.
Esto se puede solucionar modificando el metodo Image::Save para que funciones correctamente.

```
bool Image::Save (const char * file_path) const {
    // TODO this makes assumptions about the internal representation
    // byte * p = img[0];

    // This does not make assumptions about the internal representation
    byte *p = new byte[rows*cols];
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            p[j + cols*i] = img[i][j];
        }
    }
    return WritePGMImage(file_path, p, rows, cols);
}
```
Como podemos ver este metodo tiene un orden de eficiencia __O(nrows * ncols)__, pues estamos copiando el contenido de la imagen
en un buffer de datos _p_.

Por tanto, esta implementacion resuelve nuestro problema, pues ya podemos barajar de manera mas eficiente las imagenes
a disposicion con una frecuencia mayor, y solo tendria un orden de eficiencia __O(nrows + nrows*ncols) = O(nrows*ncols)__
en el caso ultimo de querer guardar la imagen.

Finalmente, visualicemos el comportamiento del programa con los mismos test de la anterior implementacion

#### Test 1. Distinto numero de filas

@image html exper1.2.png

Como se puede observar, en el mismo caso de uso, la nueva implementacion concede un comportamiento lineal despreciable teniendo
tiempos de 2-4 milisegundos en promedio.

#### Test 2. Distinto numero de columnas
_imagen exper2_

@image html exper2.2.png

Este caso es diferente al primer caso, pues ahora que ya sabemos que la nueva implementacion es __O(nrows)__, el que cambien
el numero de columnas de la imagen no afecta en nada a que la curva crezca, resultando en una linea constante como se puede ver
en la grafica.

#### Test 3. Distinto numero de llamadas a ShuffleRows
| __Numero de llamadas__ | __Tiempo de ejecucion (ms)__ |
| ---------------------- | ------------------------ |
| 0                      | 0                        |
| 100                    | 362                      |
| 200                    | 332                      |
| 300                    | 244                      |
| 400                    | 227                      |
| 500                    | 221                      |
| 600                    | 221                      |
| 700                    | 246                      |
| 800                    | 293                      |
| 900                    | 521                      |

Y como se puede observar, los tiempos que tarda el programa en ejecutar la misma cantidad de llamadas que la implementacion
anterior es notablemente menor.

*/